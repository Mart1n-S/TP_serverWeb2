worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # Autoriser uniquement les requêtes POST vers le script de génération
        location = /generate_token.php {
            limit_except POST {
                deny all;
            }
            proxy_pass http://donsecure-apache:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Rediriger vers / si JWT déjà valide (empêche accès à login.html)
        location = /jwt/login.html {
            access_by_lua_block {
                local jwt = require "resty.jwt"

                local function read_secret_key(path)
                    local f = io.open(path, "r")
                    if not f then return nil end
                    local key = f:read("*a")
                    f:close()
                    return key and key:gsub("%s+", "") or nil
                end

                local key = read_secret_key("/etc/nginx/jwt-secret.key")

                local cookie = ngx.var.http_cookie
                local token = cookie and string.match(cookie, "auth_token=([^;]+)")

                if key and token then
                    local jwt_obj = jwt:verify(key, token)
                    if jwt_obj.verified then
                        return ngx.redirect("/")
                    end
                end
                -- sinon continuer et afficher login.html
            }

            root /usr/local/openresty/nginx/html;
        }

        # Accès libre au dossier jwt/ (ex: CSS, JS, images)
        location /jwt/ {
            root /usr/local/openresty/nginx/html;
        }

        # Vérification du JWT pour tout le reste
        location / {
            access_by_lua_file /usr/local/openresty/nginx/html/jwt/jwt_verifier.lua;
            proxy_pass http://donsecure-apache:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Rediriger vers login si token invalide
        error_page 401 = /jwt/login.html;
        error_page 403 = /jwt/login.html;
    }
}
